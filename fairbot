#!/bin/sh

#
# FAIRBOT script to create SQL for playing Fairwinds
#
# Copyright 2015, Berend M. Tober
#

me=$(basename $0)
export COLUMNS=10
unset file


usage="
NAME
  ${me} - Interactive menu for the Fairwinds game. 

SYNOPSIS
  ${me} [options] host [username]  

DESCRIPTION
  ${me} is a script that presents an interactive menu system
  for playing the Fairwinds game hosted on the specified host.
  It requires that the psql data base client software be
  installed and accessible in the user's PATH.

  If no username is specified, it defaults to the current user.

  CTRL-D is used to exit menus.

OPTIONS

  -h
      Show help menu.

  -f file
      Save generated SQL statements to file.

"

if [ $# -lt 1 ]
then
  echo "${usage}"
  exit
fi

while [ "$#" -gt 0 ]
do
  case $1 in
    -\?|-h)
      shift
      echo "${usage}"
      exit
      ;;
    -f)
      file="${2}"
      shift 2
      ;;
    -*)
      echo "invalid option '${1}'"
      exit 1
      ;;
    *)
      break
      ;;
  esac
done

fairian_name="${2-$USER}"
export PGDATABASE="fairwinds"
export PGHOST="${1}"
export PGUSER="${fairian_name}"
export PGAPPNAME="${me}"

[[ -n "${file}" ]] && printf "%s\n%s\n" "\set QUIET on" "\set VERBOSITY terse" >> "${file}"
  
display_game_info="select click, start_time, end_time, click_interval, ls_mean, ls_std_dev from fairwinds;"
display_connections="select * from connection;"
display_players="select fairian_name, email_address, created_date, click_order_count, click_select_count, mill_rate, case when deceased = true then deceased else null end as deceased, heir from fairian order by fairian_name;"
display_health_journal="select click, fairian_name, debit, credit, balance, description from health_journal where fairian_name = current_user order by click, seq;"
display_cash_journal="select click, fairian_name, debit, credit, balance, description from cash_journal where fairian_name = current_user order by click, seq;"
display_food_journal="select click, fairian_name, debit, credit, balance, description from food_journal where fairian_name = current_user order by click, seq;"
display_skill_journal="select click, fairian_name, skill_name, debit, credit, balance, description from skill_journal where fairian_name = current_user order by click, seq;"
display_bonds="select * from bond where bond_owner = current_user or bond_issuer = current_user;"
display_land="select * from land where fairian_name = current_user;"
display_contracts="select contract_number, issue_date, term, customer, supplier, work_place, skill_name from work where customer = current_user or supplier = current_user;"
display_notes="select * from note where factor = current_user or debtor = current_user;"


function executesql {
  if [[ -n "${file}" ]] 
  then
      echo "${1}" >> "${file}"
      echo "SQL written to file ${file}"
  else
    local sql=$(printf "%s\n%s\n" "\set VERBOSITY terse" "${1}")
    psql -q <<< "${sql}"
  fi
}

function createmenu {
  echo "Creating Fairian '${fairian_name}'"
  read -p "Player email address=" email

  sql="insert into fairian (fairian_name, passwd, email_address) values ('${fairian_name}', '${PGPASSWORD}', '${email}');"
  prompt="insert into fairian (fairian_name, passwd, email_address) values ('${fairian_name}', '******', '${email}');"
  export PGUSER="fairwinds"
  executesql "${sql}"
  export PGUSER="${fairian_name}"
}

function labormenu {
  local IFS=$'\n' 
  land_plots=$(psql -q -t <<< "select serial_number, productivity from land where fairian_name = current_user order by 1;")
  if [[ "${land_plots##[[:space:]]}" = "" ]]
  then
    echo "You own no land plots"
    return 
  fi

  skills=$(psql -q -t <<< "select skill_name from skill order by 1;")

  unset fields values
  local ps3="select skill name "
  select skill_name in ${skills}
  do
    skill_name="${skill_name##[[:space:]]}"
    if [[ -n "${skill_name}" ]]
    then
      fields="${fields}, skill_name"
      values="${values}, '${skill_name}'"
    fi
    break
  done

  local PS3="Select work place serial number "
  select work_place in ${land_plots}
  do
    work_place="${work_place##[[:space:]]}"
    work_place="${work_place%%\|*}"
    work_place="${work_place%%[[:space:]]*}"
    if [[ -n "${work_place}" ]]
    then
      fields="${fields}, work_place"
      values="${values}, '${work_place}'"
    fi
    break
  done

  fields="${fields#,}"
  values="${values#,}"
  sql="insert into work (${fields}) values (${values});"
  executesql "${sql}"
}

function terminatemenu {
  local supplier_contracts=$(psql -q -t <<< "select contract_number, issue_date, term, customer, supplier, work_place, skill_name from work where customer = current_user or supplier = current_user order by 1;")

  local PS3="Select labor contract number "
  local IFS=$'\n' 
  select contract_number in ${supplier_contracts}
  do
    contract_number="${contract_number##[[:space:]]}"
    contract_number="${contract_number%%\|*}"
    contract_number="${contract_number%%[[:space:]]*}"
    [[ -z "${contract_number}" ]] && break
    sql="update work set active = false where contract_number = '${contract_number}';"
    executesql "${sql}"
    break
  done
}

function managemenu {
  skills=$(psql -q -t <<< "select skill_name from skill order by 1;")

  unset set_clause where_clause
  local PS3="Select skill name "
  local IFS=$'\n' 
  select skill_name in ${skills}
  do
    skill_name="${skill_name##[[:space:]]}"
    break
  done
  

  local display_contracts="select contract_number, issue_date, term, customer, supplier, work_place, skill_name from work where customer = current_user and skill_name::text = '${skill_name}';"
  contracts=$(psql -q -t <<< "${display_contracts}")
  if [[ "${contracts##[[:space:]]}" = "" ]]
  then
    echo "You have no labor contracts"
    return 
  fi

  local PS3="Select contract number "

  select contract in ${contracts}
  do
    contract="${contract##[[:space:]]}"
    contract="${contract%%\|*}"
    contract="${contract%%[[:space:]]*}"
    if [[ -n "${contract}" ]]
    then
      where_clause="where contract_number = '${contract}'"
    fi
    break
  done

  land_plots=$(psql -q -t <<< "${display_land}")
  if [[ "${land_plots##[[:space:]]}" = "" ]]
  then
    echo "You own no land plots"
    return 
  fi

  local PS3="Select work place serial number "

  select work_place in ${land_plots}
  do
    work_place="${work_place##[[:space:]]}"
    work_place="${work_place%%\|*}"
    work_place="${work_place%%[[:space:]]*}"
    if [[ -n "${work_place}" ]]
    then
      set_clause="set work_place = '${work_place}'"
    fi
    break
  done

  sql="update work ${set_clause} ${where_clause};"
  executesql "${sql}"
}

function callmenu {
  notelist="select 
    ltrim(serial_number), round(amount::numeric, 3), factor, debtor
    from note
    where factor = current_user order by 1;"
  notes=$(psql -q  -t <<< "${notelist}")
  unset fields values
  local PS3="Select note serial number "
  local IFS=$'\n' 
  select serial_number in ${notes}
  do
    serial_number="${serial_number##[[:space:]]}"
    serial_number="${serial_number%%[[:space:]]*\| *}"
    [[ -z "${serial_number}" ]] && break
    sql="update note set called = true where serial_number = '${serial_number}';"
    executesql "${sql}"
    break
  done
}

function taxmenu {
  unset fields values

  read -p "Property tax mill rate=" mill_rate
  if [[ -n "${mill_rate}" ]]
  then
    fields="${fields}, mill_rate"
    values="${values}, ${mill_rate}"
    sql="update fairian set mill_rate = '${mill_rate}' where fairian_name = current_user;"
    executesql "${sql}"
  fi

}


function tradeparametersmenu {
  landlist="
    SELECT 
      --city_name,  
      land.serial_number, 
      land.productivity
    FROM privileged.land
    WHERE  land.fairian_name = current_user
    ORDER BY land.serial_number ASC;"

  case "${1}" in
    bond)
      read -p "bond term=" term
      if [[ -n "${term}" ]]
      then
        fields="${fields}, term"
        values="${values}, ${term}"
      fi
      ;;
    land)
      case "${2}" in
        bid)
          read -p "land productivity=" productivity
          if [[ -n "${productivity}" ]]
          then
            fields="${fields}, productivity"
            values="${values}, ${productivity}"
          fi
          ;;
        ask)
          land_plots=$(psql -q -A -t <<< "$landlist")
          local PS3="Select land serial number "
          select serial_number in ${land_plots}
          do
            serial_number="${serial_number##[[:space:]]}"
            serial_number="${serial_number%%\|*}"
            serial_number="${serial_number%%[[:space:]]*}"
            if [[ -n "${serial_number}" ]]
            then
              fields="${fields}, serial_number"
              values="${values}, '${serial_number}'"
            fi
            break
          done
          ;;
      esac
      ;;
    work)
      skills=$(psql -q -t <<< "select skill_name from skill order by 1;")

      local PS3="select skill name "
      select skill_name in ${skills}
      do
        skill_name="${skill_name##[[:space:]]}"
        if [[ -n "${skill_name}" ]]
        then
          fields="${fields}, skill_name"
          values="${values}, '${skill_name}'"
        fi
        break
      done

      read -p "contract term=" term
      if [[ -n "${term}" ]]
      then
        fields="${fields}, term"
        values="${values}, ${term}"
      fi
        
      case "${2}" in
        bid)
          read -p "minimum effectiveness=" effectiveness
          if [[ -n "${effectiveness}" ]]
          then
            fields="${fields}, effectiveness"
            values="${values}, ${effectiveness}"
          fi
          ;;
        esac
      ;;
    food)
      read -p "quantity=" quantity
      if [[ -n "${quantity}" ]]
      then
        fields="${fields}, quantity"
        values="${values}, ${quantity}"
      fi
      ;;
    note)
      case "${2}" in
        bid)
          local factor=" is null"
          ;;
        ask)
          local factor=" = current_user"
          ;;
        esac

      notelist="
        select 
          serial_number, 
          round(amount::numeric, 3), 
          factor, 
          debtor
        from note
        where factor ${factor};"

      notes=$(psql -q  -t <<< "${notelist}")
      local PS3="Select note serial number "
      local IFS=$'\n' 
      select serial_number in ${notes}
      do
        serial_number="${serial_number##[[:space:]]}"
        serial_number="${serial_number%%[[:space:]]*\| *}"
        fields="${fields}, serial_number"
        values="${values}, '${serial_number}'"
        break
      done
      ;;
  esac
    
  if [[ -z "${fields}" ]]
  then
    sql="insert into ${mrkt}_${side% - *} default values;"
  else
    sql="insert into ${mrkt}_${side% - *} (${fields##,}) values (${values##,});"
  fi

  executesql "${sql}"
}


function sidemenu {
  sides=(
      "bid - Buy order" 
      "ask - Sell order"
      )
  unset side
  local PS3="${mrkt} buy or sell? "
  select side in "${sides[@]}"
  do
    side="${side%%[[:space:]]*- *}"
    case "${side% - *}" in
      "bid"|"ask")
        read -p "expiration=" expiration
        if [[ -n "${expiration}" ]]
        then
          fields="expiration"
          values="${expiration}"
        else
          fields=""
        fi

        read -p "${side} price=" price
        if [[ -n "${price}" ]]
        then
          fields="${fields}, price"
          values="${values}, ${price}"
        fi
        ;;
    esac
    break
  done
}

function marketmenu {
  mrkts=("bond" "land" "work" "food" "note")
  unset mrkt
  local PS3="Select market "
  select mrkt in "${mrkts[@]}"
  do
    case "${mrkt}" in
      "bond"|"land"|"work"|"food"|"note")
        sidemenu
        ;;
    esac
    break
  done

  [[ -n "${mrkt}" ]] && [[ -n "${side}" ]] && tradeparametersmenu ${mrkt} ${side}
}

function reportsmenu {
  options=(
      "Game         - Display game information" 
      "Connections  - Display currently logged in players" 
      "Players      - Display registered players" 
      "Health       - Display health history journal"
      "Cash         - Display cash transcation journal"
      "Food         - Display food transcation journal"
      "Skill        - Display skill history journal"
      "Land         - Display owned land plots"
      "Bonds        - Display owned and issued bonds"
      "Contracts    - Display engaged labor contracts"
      "Notes        - Display factor/debtor notes")
  local PS3="Select report "
  unset option
  select option in "${options[@]}"
  do
    option="${option%%[[:space:]]*- *}"

    case "${option}" in
      Game)
        sql="
        \C 'Game Information'
        ${display_game_info}
        \C
        "
        executesql "${sql}"
        ;;
      Connections)
        sql="
        \C 'Connections'
        ${display_connections}
        \C
        "
        executesql "${sql}"
        ;;
      Players)
        sql="
        \C 'Fairians'
        ${display_players}
        \C
        "
        executesql "${sql}"
        ;;
      Health)
        sql="
        \C 'Recent Health Journal Entries'
        ${display_health_journal}
        \C
        "
        executesql "${sql}"
        ;;
      Cash)
        sql="
        \C 'Recent Cash Journal Entries'
        ${display_cash_journal}
        \C
        "
        executesql "${sql}"
        ;;
      Food)
        sql="
        \C 'Recent Food Journal Entries'
        ${display_food_journal}
        \C
        "
        executesql "${sql}"
        ;;
      Skill)
        sql="
        \C 'Skill Journal Entries'
        ${display_skill_journal}
        \C
        "
        executesql "${sql}"
        ;;
      Land)
        sql="
        \C 'Land'
        ${display_land}
        \C
        "
        executesql "${sql}"
        ;;
      Bonds)
        sql="
        \C 'Bonds'
        ${display_bonds}
        \C
        "
        executesql "${sql}"
        ;;
      Contracts)
        sql="
        \C 'Labor Contracts'
        ${display_contracts}
        \C
        "
        executesql "${sql}"
        ;;
      Notes)
        sql="
        \C 'Notes'
        ${display_notes}
        \C
        "
        executesql "${sql}"
        ;;
      esac
  done
}

function mainmenu {
  options=(
      "Create     - Create a Fairian account named ${fairian_name}" 
      "Reports    - Display game data"
      "Trade      - Enter buy/sell orders" 
      "Manage     - Assign work place to labor contracts"
      "Labor      - Assign self-owned labor contract" 
      "Terminate  - End a labor contract" 
      "Call       - Demand note payment" 
      "Tax        - Set property tax mill rate"
      )
  local PS3="Main menu selection "
  unset option
  select option in "${options[@]}"
  do
    option="${option%%[[:space:]]*- *}"

    case "${option}" in
      "Create")
        createmenu
        ;;
      "Reports")
        reportsmenu
        ;;
      "Trade")
        marketmenu
        ;;
      "Manage")
        managemenu
        ;;
      "Labor")
        labormenu
        ;;
      "Terminate")
        terminatemenu
        ;;
      "Call")
        callmenu
        ;;
      "Tax")
        taxmenu
        ;;
    esac
  done
}

[[ -z "${PGPASSWORD}" ]] && read -s -p "Fairwinds password:" PGPASSWORD
echo
export PGPASSWORD

[[ -n "${file}" ]] && echo "set session authorization ${2};" >> "${file}"

mainmenu

[[ -n "${file}" ]] && echo "reset session authorization;" >> "${file}"

