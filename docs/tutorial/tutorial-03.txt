== Fairwinds Game Tutorial 3 - Bootstrapping the Land Market

When 'Fairwinds' is initialized, there are no 'Fairians', no land, no
food, and no money. As players enter the game, resources must be brought
into existence by means of market activity that creates demand. The
market response that creates the land and money needed for the game to
progress is called "bootstrapping", 'i.e.', the game is figuratively
"lifted by the bootstaps" to create wealth out of nothing.

This tutorial illustrates that bootstrapping process for the land market
and the role you play in making it happen.

For purposes of illustration, in this tutorial there will be only a
single 'Fairian', named Alice, participating in the game.  This
obviously is a circumstance almost all players will not encounter (since
only one player is ever the first player to enter the game!), but
the techniques employed are sufficiently illustrative as to be
instructive on how general play proceeds.

Utilizing the psql client application, Alice connects to 'Fairwinds' and
is presented with the command prompt:

--------------------------------------------
psql -h fairwinds.btober.net fairwinds alice
fairwinds=>
--------------------------------------------

Alice endeavors to buy a plot of land, and so she checks to see if there
are any open orders to sell land by querying the land_ask relation:

--------------------------------------------
fairwinds=> select * from land_ask;
 serial_number | expiration | productivity | price | fairian_name 
---------------+------------+--------------+-------+--------------
(0 rows)
--------------------------------------------

In this circumstance where no offers to sell exist, when a market order
to buy is placed for a zero-productivity land plot, the 'bootstrapping'
algorthim is invoked and a new land plot is created by the game and
offered for sale. 

Alice reminds herself of the land_bid relation structure:

--------------------------------------------
fairwinds=> \dS land_bid
             View "privileged.land_bid"
    Column    |        Type         | Modifiers
--------------+---------------------+-----------
 expiration   | bigint              |
 productivity | private.probability |
 price        | private.faircoin    |
 fairian_name | name                |

--------------------------------------------

and sees that it has four columns. She does not have to specify the
fairian_name, as the game will fill in her name automatically. The price
value is also optional: omitting it implies a 'market order', similar
to the real-world financial markets where a market order means "I will
match and trade at as good an offer as any other offer." Which leaves
only the expiration and productivity values to specify. The former
allows Alice to specify how many clicks the offer will stand for and at
which point, if it has not been executed, will be deleted. The latter is
the minimum land productivity value she will accept. Productivity is a
measure of land quality, and, as the name implies, is a measure between
zero and one of how much food the land can produce when put under
cultivation -- so more productive land is more valuable than less
productive land. In this case Alice specifies a productivity value of
zero in order to invoke bootstrapping:

--------------------------------------------
fairwinds=> insert into land_bid (expiration,productivity) values (5,0);
INSERT 0 1
--------------------------------------------

The +INSERT 0 1+ response indicates successful order processing.

Alice reviews her order by querying the +land_bid+ view:


--------------------------------------------
fairwinds=> select * from land_bid;
 expiration | productivity | price | fairian_name 
------------+--------------+-------+--------------
(0 rows)
--------------------------------------------

and finds that her order does not appear. This is because a market order
is not recorded when there are no open sell orders to match against. 
However, she then again examines the land_ask relation and sees the 
result of the land bootstrap process:

--------------------------------------------
fairwinds=> select * from land_ask;
 serial_number  | expiration | productivity | price | fairian_name 
----------------+------------+--------------+-------+--------------
 356a192b7913b0 |            |            0 |     0 | 
(1 row)
--------------------------------------------

which shows that a new, zero-productivity, un-owned land plot has been
created and offered for sale. 'Bootstrapped' land orders to sell have no
expiration date ... land, once surveyed and entered into the land
records is never destroyed or deleted from the game, so this land_ask
order will persist until a 'Fairain' buys the land.

The serial_number, which serves as a unique identifier for the plot, is
set randomly by the game for each new plot of land. 

The offer price is determined by a land-scarcity pricing formula
according to a simple quadratic polynomial. For the very first plot of
land, the plot is offered for sale at zero cost, and subsequent plots
are priced at monotonically-increasing values.


Alice then places another order with a productivity value to match the
open ask order:

--------------------------------------------
fairwinds=> insert into land_bid (expiration,productivity) values (1,0);
INSERT 0 1
--------------------------------------------

Again, the +INSERT 0 1+ result indicates success.

Alice can confirm that she purchased the land by quering the land relation:

--------------------------------------------
fairwinds=> select * from land;
 serial_number  | productivity | fairian_name 
----------------+--------------+--------------
 356a192b7913b0 |              | alice
(1 row)
--------------------------------------------

showing that she is now listed as the owner.

Note that the serial numbers in the description column you see will
likely differ from that shown above, as they are assigned randomly.

Now that Alice is a land owner, she can cultivate the land to produce
food.

